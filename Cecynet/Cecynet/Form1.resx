<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAALAAAABrCAYAAADXTgiyAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAABTGSURBVHhe7Z0HvB1FvccpQXrvvTfpSESa79EEBT6AKISWkBAIgpSACQJJBEUJgvTyAIEkmEQE
        EXkgglKkSXkKPMSHgAIiiIJ0UaRcv9/z/nOYe++5aWdvzr258/t8vp+zO7NlZue3s7Ozs3tmK2qvgYN3
        l1PhPFg6glsi9j87bA13wCYRXFTUtTDKBvAatMHzsGVEzVSxX807Fv4BpuVGmCuii4o6C4Nomh+GYeRP
        sExEz3Sx7yHwYaTlX7BHRBUVdRYG2QneC8PI4RHVErH/ueHeLD2Pw3wRXVT0kTDGvPBwGEWcbvklmzTY
        Bk4nlbXxCIjYoiKkIeBwSOZ9Fz4b0S0V6bBZMzHSJS/D8hFdVFQzyTLgDVsyyXUwR0S3XKRlTXg10iYX
        w+wRXdSXhRHELrNkjtfh4xHdY0SaxmRpfAc2j6iiviyMsCm8GcaQ06DH1W6kaXF4ItIoP4OPRXRRXxQG
        mANuCkPIH2GJiO5xIm37Q+pW88Zun4gq6ovCALvCB2EIjTE0onqkSN9c8ItIrzwF80d0UV8SBb8APBZG
        kPuhX0T3WJHGzcFekpTuUVBu6PqSKHAZHgYQH9duH9E9WqRTroh0y99glYgu6guiwFeEF8MAMhl6TLfZ
        1ERaV4O/RtpFQ/ea9Bc1IQpaLomCF/tX14zoXiPSfHyWB68gn46oollZFLRtyLej4OVk6HVtSNK8CPwm
        8iB3wdwRXTQrigK22+znUeDyDCwc0b1OpH0vSN1q78PAiCrqSZo0fvQWMLxZRo0a8p2swO0+Gwixl94n
        0j4n1E/IQUN2f/6KS7/aMO/TyZGTx41ZNHZT1Kw4oKdAWzNMuPzEti8dsXeqecVL7pyxi0o1YNCusijs
        DKPgEhgP58BhsCFUsm/y4JNEHy3X8nXKyYc0zP908s7k8WPWjl0UNSsOaNMGPvXrw3LzWuDbxOYrFcZc
        Cc6EF+EDaGvAO3AP7AVNPQ4mH+Lgnlrehhzy+bbLLh7Z8BhMB8XAVYoDOhjunFEuvXjkI0MP3Ss38Dio
        tNsJI84O+8Dz0Mi0jXgffgSLx2ZmSORlJfhz5K1txMiBb08cN+quRsdiGrll0vgxK8bmi1opClQ0bDLv
        K1Bpxz8G1Lwj4D1oZNQp8S5sFpuaYZGn/MHMP2GHiCrqzaIgfaMhvRgpJ0DENi/MJweDtWlHc9qE+APc
        CT+BX8NbkC9zPsTWZlzkaUHI3yh5AOaJ6KLeKAqwH3izlgr1aah08AvmWw9eCTPmPAi7wCKxqMv2gzXg
        dNDIz8FyEd20yNtukPeyHAIRW9TrROENiMIU+0mdj9jmhfnkasiN+yFcCVN8+ZL4HeALMVuJyJuvH/0U
        Up5fgF7bz92nRcE5ANwaNxWmA8Ar7TbDgOvD25Ab+CaY6hMxlqlRtcjjhvBW5FnOgDJarTeJApNTogDF
        R8eVv4KDAY+H3Lw2CzaO6JaIfMrZkW95A9aP6KIqNXLUQXNAv6oZdPAe61Jo9jakQnTwTuWjtTDr9Zl5
        5RZo+agw8ro85C+pXnvE8H3nHjF6cL9uoO/W7mT+CLi/aoYe9oVns8Jz2OEKsctKhVkfy8wroyKq5SLP
        +WcC3jvyuP0fbnSsKmDV2GXfE5kfC21VcszxBzomIBWc+MZC7LFaYVh7EXIDD4uolos8zwd+yad2HA4e
        tlfD41UBPe4N7pkmMl+5gY87cVDbQUP3zA18DXTLq0IY9vEOBj4holou8rwG1L8lMezLezc8XhXQpw3c
        H4ZWDU2Iiyi0/O3dbnkqhWHtccgNbJu45W1C8uuw0QmRf3n5qBEHHNnoWFVAGbVWtSiw+eGhrAD/x7CI
        rkyYdXRmXnkNWj4IhrxuBz5OTvk/NqKKeosotJ0h/yjeERFVmTDrJuDIstzEP4CWfXCEfPpFy/si3/Io
        LBTRRb1FFJqPkfNv/dqtVOm3fjHqnNCxGeGYiDOgyy9bEiebwY4RVInInwwGnzqmE7d8U7i3isJbG/KB
        PHbwR2w1woT9oeMAHbFPeHNo1y/M/MJwHLwKT8JiEdW0yNtC4Ee5U35vgfK2cm8VhSenR2GKHwRZL6Ir
        EQZ0KOUx0GjwusMrfwfXgm9k3AZvgOMl0jKnx6aaEvlyHITfdUt59eljS58KFlUgCnFJeC4KVX4MlX64
        GhM6ymwszMh4YMdSNN0VRZ58+uiXNVM+z4eILWqpJo0fveTECaPXnVGOHr5fXjPZPtwlNl2ZMKHt4aPh
        TWhk1EZYE98FTb39QH7sNrs68tc2+OA9Xx172uE7NjoW08g6E8eNLl++rEoYuKl34q668qS2o47eNxlY
        vDNfMDZfqTDjOjAOGrWLc3wMPRSaNgp5scel/r20sd86vOFxmA7KO3FVigPa9EudF5w7vG3QkD2Sgb07
        77a+UUw5BywLB8B5cB3cDJNgDGwF80KsMeMiH/OA/dy1vH35qAFtV11xUsNjMB0UA1cpDugJ8EYzTBw3
        6o0RIwf+PRU0vASVvQ3RCpF+OQzqn4g956yjG+Z/OnkJA/e6z231WE2+atT8k64atXSzjBh54CYUcm7i
        C6HXDgck7Q7ar3+kcNCQ3W+aOKFx3qeTpb73vZO75ZsZRU2Kgs4Huvvngb3yL1xJt91mZ0U+pAxc7wui
        kDu+anQz9Lo7btK8EeT/7eGrQxFbNEuLgh4EabSa3Wqfj6heIdLrN9Guj/SL/dzLRnTRrC4K2zv3O6Pw
        xYHfvebtXdLq6/M2f1L6e/R/exR1gyj0LSH1nVob95jB6FMS6fQvcTv+t0f5gElfE4Xu06v8k1P+10SP
        /h4Y6ZOjIDV/HC7aK/7bo6gbROGvDN69JxNfBj129BZpWxrsv07pvRYitqhPCgOcCHmN9qmI6lEiXXab
        2W+dzOv7buVpWV8XJlgUfhumkNugx7UpSVN/yL+48w2I2KI+LYzgN9PS41i71faLqB4h0uPbJfZXJ/P+
        HpaM6KK+Lszge2S3hjnkSegxb9uSFv/MJb3fJwdGVFHR/wtTfALyv3A9OaJaKtLhB0p+l6Xrbqh0QH7R
        LCBM4U1S/geI9k609C9c2b+MiPSIr8qXPzQsaizMsQLkHwUcDy3rVmPfpif/S9mJELFFRQ2EQY6FvFtt
        64iaqWK/XhHsl07mfRlWj+iiosbCJL6a7itHvtV7LiwRUTNV7Fe2Atu8nlDd9pHCollMYRz7XSOkdSIN
        DjzaB+r/tVFUVFRUVFRUVFRUVFRUVFRUVFQ0UzRo8J6zw7wZ5TOsM1Mc8PngU7AX7AGbQ697N4w0Lwar
        ZjTMA+H9YJVsuaa+7cb6y8ETwW9gw4gq6i5xkGV9GA+vwQfQBh/GtGHfBZeJtXq2SOdYeC/jjIhqJ8JX
        htez5Q6NqBlSbM9jJ/+Cyv/JtCgTB3guGA5vQDrwXaGRD4tVe7RI5xlZuuUdWDei6yLM2vftWEaayh/r
        FwPPLHFwba99C96HdNDFmtewRuHDY/UeLdLZ0cDyI2j333bMFwP3RnFg5SDITapB74DB0B9s/w6NMOPv
        h4Z/q0X4QrAubACLQsR0LZaZH9YBmyaV/uMP22tkYJtDu8UiNTE/zQYmLs/jIhAxH4mwYuCZIQ6sBfBS
        HGh5Fw6HTt8zMwyOgS0jqCbmrcE3g6vhb/AP+CfYprS22wrafaWSeVkLroC/QFrH9SdCvZ3N78Lww+Aa
        WKcWkYmwU7Nl6l/SYbqRgeV/of61IKanaGDmzeMn4FrI82hz6nowj2nZk+AGSNvyhLkVJndgrdoKRTMu
        DuKXIR1oa96vQcR2lnF5PNMW7GEwpbbzW3As1LqS+HWdneCv0Gh5eRW+CC67VISJV4qtajvPRNhd2TLn
        R7DhuYHTzWiaHhmLuVyXBmZ6DufhzYhrhOt6crvszyJsarSrCIqmUxxAD/bPswP6DExX9xHLfw6sifKC
        aYTG2znW2Rg0aKPlcjS+zZeqDPwK3JzNvwwrxXJTMvCuYI2b4rrCk+MzUAw8M8QBtPnwXHZAL4qoaRLL
        26SwnzOtb/fTRbA9WBulcLkb7Fu2t+O2CBPbh1fCDoHddIYZ9yAsA1UZ+M9gu/XvWdgEsJZvaGB+fQjx
        2yzcJtbFYB7ttbEmT3GmwTyOhhsjTDS2FcUPOlCaEM2IA7gkWCulA318RE2TWH7bbF0L8kRIl/xHIcU9
        BavGOp8ETZDiToN6jwDTc8Io+DXU/qKA3yoNrMHscUnG86TbEroy8I7gPlP48eCVy2PnA4oU/jTUanPF
        dLmJ625xUBeH/AbuGxE1TWJ5jZbW9UbMmy0NaK2Wwr3JqRuOaQ2Q4jx5On1AhDBrvfr3eJmu0sBu23z/
        IcLkF2AvSCMDW5umMJs984BXkTyPhrdLE/PFwN0tDqqF8UgcZLkTInbqYtnzs3UfjDB7MFKN5e+A2sIh
        5m1ipHXugXb9sY3EMpUaOMIPhHRDJ6dAIwNfkIU9EGFHQFpXc+5reC7CioG7WxzUjgXkzdi2ET1Vsezp
        2bpeTu1KS+1LC/hkaDeIhfkLI17sT57qR0RYZolsHbfb6U1mwtxWWmZaDDw35G1xzWtzIs0nA387CzOP
        jg/Je1ysoTsN1CFshWyZhiddUQXiwG4aBzgd7CfB2iOW+EiGwepQewGSXx90pPU0/7PZvH3C3uQ5MGYL
        SNvIb+40e6e/gSXM/dsuTfNe9vNegHaffmJ+QbCpkuKnamDFtGbsqgclGXhIFqbBfx/TtqG/DzYnaumt
        bTTEvG3tvK1/TEQVVSkOrDddk7IDLbYP9wNrKZcRzTgA7LU4G1xvWWjUvWTvge3MFcHeB/t7twG383Gw
        eywt+wB4UqT9rAb3gut4w2eYI8XcZlrncVgaUrryZolMq4G9Gbss4jqSDLwSNOr/fQh80qh5bb7YJZc/
        zHDbtq3T8rb37XI0Lx47qS1b1KQ4kN5R570GCWu1++CXMZ3CrTlrtSp4ic27ksSnXJowN7fr2//rOnkz
        QqwFbQ+7r7xG1MS1YYj8+sAl34/bswmQasScaTKwYt4TIe+JSdQMrJg+s0OcmEfTnKfXm7mNYjXX2w3y
        Zol47DS79I9Fi5oVB9NaMG9HTo1LYj0v33lbsit+BUvFOo7R9Yax0XI5Gjqt4yX59gifGue5jmJ6igZW
        hHXsz5XcwPaXT8vDiXoeFdPWwu6/o4kT5UFGleKAaixrmyk9FraWcYxt/fOoToOX8fwBQcIayrEN7f6m
        innXuRwc3thxHWtuu6nadbExb21p2zo96Eh0nP9arOI602LgBSDvjZG6gRXzKY+NmkyG2QxbOhavizDb
        yD6Gfh7yew0pBu4OcWC9gx4GDmz3CdItMA4Ohob/l0a4rA3epFnQti1Hgk++uvy7WeLWA2vAtM5xsEFE
        dxJx1mr9wTEbl4IDZ74JqQa1l2KPWNzlfRR9aHAANOy2I3yjbDlpNGZY7C9OefSp4VdgQ5jiX+oS74i7
        7WAQpH10MnxRheIAi4aRCG2tIk0OZ7RG9EQ7BBz1lmo1e0Kaeh2oqKjbhDl90vdjeAG8+cofRtiUGByL
        FhX1PGFQDezdfzJtwvalTYnyL/BFPVcaFHID2/a1C9A3p8ur60U9W5jUBwD2r3oTtC9sAj6piyWKioqK
        ioqKioqKioqKioqKioqKioqmpkkTxswOS8GnYDNY3LCIWw++VFuwQrHNuWEt2BrWgXkgYtuL8FXhOJjp
        T93Y5yJwEtQ/rcW0af82fCaCilolCkG+Br+H6+B6+AMcCRp7V/hpLD5NYvkF4diY7STiNO5d8CBMhHvg
        AagPDs9F+NKwJ8zQkzfW2xhm6E/qWG9+2Afq3xlm+gg4CsqTwFaLQhgEv4EVwHmxRnwofmsGhtVhP9gK
        agXH75wxvz/8B8wF/WL+UdgG2hUy85rbbY8wDgzz13Q8AYuBtfEWsDZ8FqwFNwdPKJdfDUzL7lAbp8zv
        AuAVxCvJ3rATuB2vJhfB5bBeLLsi7BUsDwYb7vb7g4bdMObdhnmsvYzKr8sfAANgZTDMfHslWRhM0x5Q
        /kixu8VB1mx3QqcRXYRpNI2lgf8PLoDj4XegQSxca+6bwdramvs7MC+cDc/C4dBuPC7z24PbmDuCamLe
        fWnsL8Jy4FXgx+A+NfP9oFG2A0+OY+FMuBcWBU+2Z+BC+ApYq38TVgFre0/Cz4HmfxxGg+l32pPX/JwA
        5sd9ul1PROPM/xKwLvwWTgabFYZbu3uCeQX7L3DdH8F1kbWi7hIH2VrLA79xBHUScRrYmnGBmD8RrNEs
        8P8EayRPBNvKz4EmM/ye2gY6iPDD4IaYbSfCvwsay1r0PagNMuc3GfhjoMEOBGt/93stDAabJS/4G+vs
        DL+MaY3+1Zg2vduC67q9G0CjLgmmvzbonN+NYF/IDXwu2PY1Xr4Ol4A179OwY6xrm/01p4u6URzk+cAa
        ZYsI6iTiNPCtMev8MLgSnNYIGsgaRyO8DJqibmB+Pw2TAy+tA6G+vVyEXwU2LTTwX6B248RvMvBC4Mlk
        e/nWQOOcBhrYvMwX63wSHo3p3MDWll4pTO81oGkPBWvwF10mF2G5gWsnT0QZp8FvBw3sVWXFCDf9r9cW
        Kuo+cZCtRa8Ga5L6KzJMi8ZdJn7rN3FMJwN72f4zbAk2GzaARgZ2GxpdbDPatvwj1F+GVMzb1nwKbDdr
        gD9BMmMysCfcI2DtqpkTrquBbQ7Ubrb47crAmn0CaDrTfSNoYGtN05/a915J3HZu4O/DMOMV00PgJkgG
        Xj7Ci4FnljjQFvSLYLvWghAv0RbaGtCVgTXm6+Dy3qlrjDdiWhPaTtVw7d4dY95Ltway5tYcLm8vg21X
        a3K7qLoysKay+XIOuJxNIJsca8KUDHw6jAVPrivAdqrp8MbQk8n2tNv6FewCnhCHwMWQG9i821Njms2b
        Nbjt7WLgVoqDvQPcARaCl+H/hlq7mN8dYXJtQcS0TQANpAHOA2vEn4A3X7eBBvMuXzM53+mtYMK8QTw1
        lrEHRM6C2p07v5rlYaity6990+5DA2t2TWQz4j5wf9ak3px5s5YMvAncHtPevGlUTzJPBvdnfr0xHQqP
        waZgnDdvbtu0e9PmDeXdkHpHxoHxnlBOa2ZratervQDLr+l/0unepdlm+zeZP8HyJhs6vgAAAABJRU5E
        rkJggg==
</value>
  </data>
</root>